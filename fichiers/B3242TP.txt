I. Exploration de l'instance XPath

1. 
/countries/country

2.
/countries/country/name/official

3.
//*[count(@*)>=1]

4.
/countries/country/name/native_name[@lang="fra"]

5.
/countries/country/name/native_name/official

6.
/countries/country/name[count(native_name)=0]/common

7.
/countries/country[count(borders)>9]/name/official

8.
/countries/country[contains(capital,"Pa")]/name/official

9.
//subregion[not(text()=preceding::subregion/text())]

Etape2.
Balise languages+ --> language (sans le +)
{inclure nouveau DTD}

Etape3.


Xquery:

1.
<noms_pays>{
for $x in //country/name/official
order by $x
return <nom>{data($x)}</nom>
}</noms_pays>

2.
<noms_pays>{
for $x in //country/name/native_name
where $x[@lang="fra"]
order by $x/official
return <nom>{data($x)}</nom>
}</noms_pays>

3.
<noms_pays>{
for $x in //country/name/official
where contains(string(data($x)),"Republic")
order by $x
return <nom>{data($x)}</nom>
}</noms_pays>

4.
<noms_pays>{
for $x in //country/altSpellings
where not(contains(string(data($x)),../name/official/text()))
return <pays nom="{data($x/../name/official)}"><nomAlternatif_different_des_noms>{data($x)}</nomAlternatif_different_des_noms></pays>
}</noms_pays>

5.(manque une space entre les langues parles)
<infosContinents>{
for $x in distinct-values(//region)
return 
<continent nom="{data($x)}" nbPays="{count(//country[region=$x])}">
<infos>
<plusGrandPays superficie="{max(//area[../region=$x])}">
{data(//country[region=$x and area=max(//area[../region=$x])]/name/official)}
</plusGrandPays>
<languesParles>
{data(//country[region=$x and area=max(//area[../region=$x])]/languages)}
</languesParles>
</infos>
</continent>
}</infosContinents>

6. (pas fini encore)
declare function local:compteLangues($country as xs:string)
as xs:string
{
  let $nb := count(//country[name/official=$country]/languages)
  return $nb
};

<h1>{string(local:compteLangues("Aruba"))}</h1>
